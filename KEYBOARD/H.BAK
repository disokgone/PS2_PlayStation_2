/*------------------------------------------------------------------*/
/* Show a 256x240 BMP to Screen 				    */
/*     by CPU.SJC (c) 1999-7-20 				    */
/*------------------------------------------------------------------*/
#include <ctype.h>
#include <sys/types.h>
#include <file.h>
#include <graphics.h>
#include <kernel.h>
#include <libetc.h>
#include <libsio.h>
#include <DEBUG.H>
#include <MYGR.H>
#include <MYGR2.H>
#include "SIOKBD.H"

#define OT_COUNT	2048		// 每個表項佔 20 bytes
#define PACKETMAX	1024		// 程式大概會用多少表項, < 10000
#define PACKETMAX2     (PACKETMAX * 24) // 最長的封包要 52 bytes, 此乘其平均值
#define NORMATTR	0x10
#define FONT256 0x40000 	// for 8x8.FON
#define TEXTBUF 0x80000 	// SCREEN BUFFER (48x30) start at here !
#define PKTBUF	0xA0000 	// PACKET BUFFER (48x30x20) start at here !
#define TEMPBUFF 0xC0000	// For expanding bitmap !
#define SCRNSIZE	1440	// (384 / 8) * (240 / 8)

GRCFG	gc;		// BG use !
BGINFO	bg0;
GsOT	usrOT[2];			// 兩個 OT 表的主指標
GsOT_TAG  OTag[2][OT_COUNT];		// 指到各別 OT 的指標陣列
PACKET	GPUPacket[2][PACKETMAX2];	// GPU Packet work area
int	curBufNdx;			// 目前顯示的緩衝區
u_long	lastDump = 0;
u_short myClut[4]= { 0x8000, 0x7E73, 0x2F3F, 0x1C9C };
extern	u_short keyHead, keyTail;
extern	u_char	keybuff[64], KBDst0, KBDst1, KBDst2;
PACKET *ptail;

char	sbuf[64];
char	kbuf[128];	// kbuf[0] 為本字串長度, 0 為字串結束
u_char	curx = 2, cury = 2, curcnt = 0, y = 2;

void clrline(long y);
void doDump(u_long addr, u_long len);	// 執行傾印
void dumpKbuf(void);
char *gotoSpace(char *pstr);		// 找到空白或 tab 鍵
void init_BG(void);
u_short GetKbdScan(void);		// get scan code back !
void KbdClear(void);
void KbdInput(void);
void mainParseKbd(void);		// 主程式的命令分析
void prepareToShow(void);
char *readHex(char *ps, long *val);	// 讀取 16 進位數值
void scrollupNline(u_short n);		// 文字上捲 N 行
char *skipSpace(char *pstr);		// 跳過空白或 tab 鍵
void uInitVideo(void);			// 第一次執行, 初始化畫面
void (* KbdInputOk)(void);		// 鍵盤輸入一行後的處理程式

void main(void)
{
u_long	pad;		// 搖桿按鈕狀態
RECT	rc;
int	i, side;

StartSIOKBD();		// 啟動鍵盤連線功能
flushkbd();
uInitVideo();		// 第一次執行, 初始化畫面
init_BG();
printf("Press select to quit !\n");
printf("usrOT=%lX, OTag=%lX, Pkt=%lX\n", usrOT, OTag, GPUPacket);
i = 1;
KbdInputOk = mainParseKbd;
KbdClear();		// 清除鍵盤緩衝區
y = 2;
do	{
	prepareToShow();
	side = GsGetActiveBuff();
	GsClearOt(0, 0, &usrOT[side]);
	ptail = grMakePkt(0, 0, (PACKET *) PKTBUF, &gc, &bg0);
	AddPrims(OTag[side], (void *) PKTBUF, ptail);
	GsDrawOt(&usrOT[side]); // Draw my TEXT background !
	DrawSync(0);		// wait for drawing is done
	VSync(0);		// wait for V-sync
	side = 1 - side;
	GsSwapDispBuff();	// switch to next buffer
	pad = PadRead(0);
	processKbd();	// 處理傳來的鍵碼值, 可隨時呼叫以免 SIO 傳輸區佔滿
	KbdInput();	// 收集輸入的字串
	if (pad & Pad1Select) i = 0;	// quit with Select key !
} while (i);
StopPAD(0);		// 停止搖桿功能
StopSIOKBD();		// 停止鍵盤連線功能
// program cleanup
ResetGraph(3);		// 保留顯示環境, 不會清除畫面
printf("Exit program!\n");
asm(" li  $4, 0xbfc00000
      jr  $4  ");
}

// -------------------- 第一次執行, 初始化畫面 --------------------
void uInitVideo(void)
{

// 初始化螢幕為 NTSC mode
SetVideoMode(MODE_NTSC);
ResetGraph(0);				// 完整 Reset (Drawing & Display Env.)

// 畫面採用 384 x 240 (左右各 8 點被當作預備區)
GsInitGraph(384, 240, 4, 0, 0); 	// use GPUOFS, 非交錯, 色彩 16-bit
GsDefDispBuff(0, 0, 0, 240);		// 定義兩個緩衝區的左上角座標
SetDispMask(0); 			// 隱藏顯示

// 初始化 Ordering Table
usrOT[0].length = OT_COUNT;		// 內含 OT 表項個數
usrOT[1].length = OT_COUNT;
usrOT[0].org = OTag[0]; 		// 指到各別 OT 的指標
usrOT[1].org = OTag[1];
GsClearOt(0,0,&usrOT[0]);		// 設定 2 OT, Z value = 0
GsClearOt(0,0,&usrOT[1]);

// 啟動搖桿訊號
PadInit(0);

printf("Video initialized OK !\n");
}

// -------------------- 預備繪圖 --------------------
void prepareToShow(void)
{
int	side;

// 取得目前顯示中緩衝區編號
side = GsGetActiveBuff();

// 設定 GPU 繪圖原始碼位址指標
GsSetWorkBase((PACKET*) PKTBUF);

// 清除目前 OT 表
GsClearOt(0, 0, &usrOT[side]);
}

// -------------------- 文字背景初始化設定 --------------------
void init_BG(void)
{
u_long	*p;
long	*myCLUT, clutId;
short	i, Tpage;
RECT	rc;

// Convert 256 characters
p = (u_long *) TEMPBUFF;	// temp buffer
grLoadFnt1(960, 384, (u_long *) FONT256, (u_long *) p);
rc.x = 960;	rc.y = 384;	rc.w = 32;	rc.h = 128;
LoadImage(&rc, p);
Tpage = GetTPage(0, 0, 960, 384);	// 256 CharFont !
printf("Tpage = %X\n", Tpage);
clutId = LoadClut((long *) myClut, 768, 0);	// load palette to VRAM

// Clear Graphic configuration
for (i=0;i < 16;i++) {
	gc.clut[i] = 0; 	// default color
	gc.tpage[i] = 0;	// 256 CharFont !
	gc.u[i] = 0;
	gc.v[i] = 0;
	}
gc.clut[0] = clutId;		// Normal ASCII Color
gc.tpage[1] = Tpage;		// Normal ASCII Text
gc.v[1] = 128;

// setting my BG !
p = (u_long *) TEXTBUF;
bg0.bgbuf = p;
bg0.xlen = 48;		// 48 = 384 / 8
bg0.ylen = 30;

setmem2(p, 0x1020, SCRNSIZE);
}

void dumpKbuf(void)
{
short	i;

if (keycnt > 16) return;
printf("keycnt = %d, ", keycnt);
for (i=0;i < keycnt;i ++) {
	printf("%02X ", keyline[i]);
	}
printf(", ");
}

// -------------- 清除一行螢幕 --------------
void clrline(long y)
{
u_char	*p;

p = (u_char *) bg0.bgbuf;
setmem2(p + (y * 96), 0x1020, 48);		// 48 = 384 / 8
}
// -------------- 清除鍵盤緩衝區 --------------
void KbdClear(void)
{
setmem2(kbuf, 0, 127 >> 1);
cury = y;
curx = 2;
clrline(y);
grPrt(1, y, 0x10, ">", &bg0);
clrline(26);
clrline(27);
}
// -------------- 收集輸入的字串 --------------
void KbdInput(void)
{		// 輸入字數不得超過 126 字元 (< 127 chars)
u_short key, kn, tmp;

curcnt ++;
if (kbhit()) {
	key = getch();
	tmp = key & 0xFF;
	kn = kbuf[0];
	if (tmp != 0) switch(tmp) {	// has ASCII code
		case 0x08:	// 按了倒退鍵
			if (kn > 0) kn --;
			kbuf[0] = kn;
			kbuf[kn+1] = 0;
			tmp = 32;	// 印出空白
			grPrt(curx, cury, 0x10, (char *) &tmp, &bg0);
			curx --;
			if (curx < 2) {
				if (cury > y) {
					curx = 44;
					cury --;
					}
				else { curx = 2;  cury = y; }
				}
			break;
		case 0x0D:	// 按了換行鍵
			kbuf[kn+1] = 0;
			tmp = 32;	// 印出空白
			grPrt(curx, cury, 0x10, (char *) &tmp, &bg0);
			y = y + (kbuf[0] / 43) + 1;	// 一行有 43 字
			if (y > 24) {
				scrollupNline(1);	// 文字上捲一行
				y = 24;
				}
			KbdInputOk();
			KbdClear();	// 此行處理完了, 秀出提示符號
			break;
		case 0x1B:	// 按了 ESC 鍵, 放棄此行重新輸入
			do	{
				clrline(cury);
				cury --;
				} while (cury == y);
			KbdClear();	// 清除鍵盤緩衝區
			break;
		default:
		    if (kn < 126) {
			kbuf[kn+1] = tmp;
			kbuf[kn+2] = 0;
			kbuf[0] ++;
			grPrt(curx, cury, 0x10, kbuf+kn+1, &bg0);
			curx ++;
			if (curx > 44) {	// 一行有 43 字 + 1
				curx = 2;
				cury ++;
				}
			if (cury > 24) {
				y --;		// 此次輸入的第一行
				cury = 24;
				scrollupNline(1);	// 文字上捲一行
				}
			}
		    else    {
			clrline(26);
			grPrt(2, 26, 0x10, "Console input buffer full !", &bg0);
			}
		    break;
		}
	else	{
		clrline(27);
		sprintf(sbuf, "special Fn key - $%X", key >> 8);
		grPrt(2, 27, 0x10, sbuf, &bg0);
		}
	}
tmp = 219;	// 實心方塊
if (curcnt < 0x20) tmp = 0x5F;
if (curcnt > 0x3F) curcnt = 0;
grPrt(curx, cury, 0x10, (char *) &tmp, &bg0);
}

// --------------- 文字上捲 N 行 ---------------
void scrollupNline(u_short n)
{
char	*p;
short	i;

p = (u_char *) bg0.bgbuf;
memmove(p+192, p+288, (23-n)*96);	// 上捲 N 行
for (i=cury;i < 25;i++) clrline(i);	// 清除游標以下數行
}
// --------------- 主程式的命令分析 ---------------
void mainParseKbd(void)
{
u_long	arg1, arg2;
u_char	*pb, no, nLen, fdta[32];
char	*p;


p = kbuf + 1;
p  = skipSpace(p);
clrline(25);		// 顯示提示訊息或錯誤用
if (isupper(p[0])) p[0] = _tolower(p[0]);
switch(p[0]) {
	case 'd':       // dump (addr) (length)
		p = skipSpace(p+1);
		if (p[0] == 0) arg1 = lastDump; // 用上次的起始位址
		else p = readHex(p, &arg1);	// 傾印起始位址
		p = skipSpace(p);
		if (p[0] == 0) arg2 = 0xA8;	// 正好印一個畫面
		else p = readHex(p, &arg2);	// 傾印長度
		doDump(arg1, arg2);		// 執行傾印
		break;

	case 'e':       // enter (addr) (hex-byte-list)
		p = skipSpace(p+1);
		p = readHex(p, &arg1);		// 設值起始位址
		pb = (u_char *) arg1;
		p = skipSpace(p);
		while (isxdigit(*p)) {
			p = readHex(p, &arg1);	// 設立值
			p = skipSpace(p);
			*pb = arg1;
			pb ++;
			if (*p == 0) break;
			}
		break;
	case 'f':       // fill (addr) (hex-byte-list) or ('string')
		p = skipSpace(p+1);
		p = readHex(p, &arg1);		// 設值起始位址
		pb = (u_char *) arg1;
		p = skipSpace(p);
		p = readHex(p, &arg2);		// 填值長度
		p = skipSpace(p);
		nLen = 0;  setmem2(fdta, 0, 16);
		if (p[0] == 0x27) {
			p ++;
			while (p[0] != 0x27) {
				if (p[0] == 0) break;
				if (nLen == 32) break;
				fdta[nLen++] = *p++;
				}
			}
		else while (isxdigit(*p)) {
			p = readHex(p, &arg1);	// 設立值
			p = skipSpace(p);
			fdta[nLen] = arg1;
			nLen ++;
			if (*p == 0) break;
			if (nLen > 31) break;
			}
		// 執行瑱入動作
		if (nLen == 0) break;
		no = 0;
		while (arg2) {
			*pb ++ = fdta[no++];
			if (no == nLen) no = 0;
			arg2 --;
			};
		break;
	default:
		grPrt(2, 25, 0x10, "Type ? for Help", &bg0);
		break;
	}
}

// --------------- 找到空白或 tab 鍵 ---------------
char *gotoSpace(char *pstr)
{
char	ch;

do	{
	ch = *pstr ++;
	if (ch == 0) break;	// 已到行尾
	if ((ch == 0x20) || (ch == 9)) break;	// 找到了
	} while (1);
return(pstr - 1);
}

// --------------- 讀取 16 進位數值 ---------------
char *readHex(char *ps, long *val)
{
long v, n;
char cc;

v = 0;
ps = skipSpace(ps);		// 略過前方的空白
do	{
	cc = isxdigit(*ps);
	if (cc) {
		n = *ps ++;
		n = n - 0x30;
		if (n > 9) n = n - 7;
		v = (v << 4) + (n & 15);	// 增入一位數
		}
	} while (cc);		// 一直轉換直到遇見非 16 進位數值
*val = v;
return(ps);
}

// --------------- 跳過空白或 tab 鍵 ---------------
char *skipSpace(char *pstr)
{
char	ch;

do	{
	ch = *pstr ++;
	if (ch == 0) break;	// 已到行尾
	} while ((ch == 0x20) || (ch == 9));
return(pstr - 1);
}

// --------------- 執行傾印 ---------------
void doDump(u_long addr, u_long len)
{
u_long	i, j, l;
u_char	*p;

p = (u_char *) addr;
do	{
	l = 8;	if (l > len) l = len;
	setmem2(sbuf, 0, 32);		// fill 64 byte !
	sprintf(sbuf, "$%08lX - ", p);  j = 12;
	for (i=0;i < l;i ++) {
		sprintf(sbuf+j, "%02X", p[i]);
		sbuf[j+2] = ' ';
		j += 3;
		sbuf[36+i] = p[i];
		}
	p += 8;
	len -= l;
	grPrt(1, cury, 0x10, sbuf, &bg0);
	cury ++;
	if (cury > 24) {
		cury = 24;
		scrollupNline(1);	// 文字上捲一行
		}
	} while (len > 0);
lastDump = (u_long) p;
y = cury;
}
